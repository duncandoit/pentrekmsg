//
//  MessagesViewController.swift
//  pentrekmsg MessagesExtension
//
//  Created by Zachary Duncan on 4/23/25.
//

import SwiftUI
import Messages

class MessagesViewController: MSMessagesAppViewController
{
    var pentrekView = PentrekView()
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
    }
    
    override func willBecomeActive(with conversation: MSConversation)
    {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        // Use this method to configure the extension and restore previously stored state.
        
        requestPresentationStyle(.compact)
        presentTouchTrackingView()
    }
    
    private func presentTouchTrackingView()
    {
        let messageVM = PentrekMessageViewModel(pentrekView: pentrekView) { [weak self] image in
            self?.sendSticker(from: image)
        }
        
        let messageView = PentrekMessageView(viewModel: messageVM)
        let messageController = UIHostingController(rootView: messageView)

        addChild(messageController)
        messageController.view.frame = view.bounds
        view.addSubview(messageController.view)
        
        messageController.view.translatesAutoresizingMaskIntoConstraints = false
        
        NSLayoutConstraint.activate([
            messageController.view.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),
            messageController.view.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor),
            messageController.view.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            messageController.view.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor)
        ])
        
        messageController.didMove(toParent: self)
    }
    
    func sendSticker(from image: UIImage)
    {
        guard let conversation = activeConversation else { return }

        do
        {
            let tempURL = FileManager.default.temporaryDirectory.appendingPathComponent("sticker.png")
            try image.pngData()?.write(to: tempURL)

            let sticker = try MSSticker(contentsOfFileURL: tempURL, localizedDescription: "Touch Sticker")
            conversation.insert(sticker) { error in
                if let error = error
                {
                    print("Failed to insert sticker: \(error.localizedDescription)")
                }
            }

        }
        catch
        {
            print("Error creating sticker: \(error.localizedDescription)")
        }
        
        dismiss()
    }
    
    // MARK: - Conversation Handling
    
    override func didResignActive(with conversation: MSConversation)
    {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dismisses the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
    
    override func didReceive(_ message: MSMessage, conversation: MSConversation)
    {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation)
    {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation)
    {
        // Called when the user deletes the message without sending it.
        
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle)
    {
        // Called before the extension transitions to a new presentation style.
        
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle)
    {
        // Called after the extension transitions to a new presentation style.
        
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
}
